{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","placeholder","autoComplete","App","gerWeather","e","a","preventDefault","target","elements","value","country","console","log","fetch","api_call","json","response","setState","sys","celsius","calCelsius","main","temp","weather","icon","Thunderstorm","gerWeatherIcon","id","state","undefined","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rengeid","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cd1ad9c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n   return (\r\n      <div className=\"container text-light\">\r\n         <div className=\"cards pt-4\">\r\n            <h1>{props.city}</h1>\r\n            <h5 className=\"py-4\">\r\n               <i className={` wi ${props.weatherIcon} display-1`}></i>\r\n            </h5>\r\n            \r\n            {props.temp_celsius ? (<h2 className=\"py-2\">{props.temp_celsius}&deg;</h2>) : null}\r\n\r\n            {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n            <h3 className=\"py-3\">{props.description}</h3>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nfunction minmaxTemp(min,max) {\r\n   if(min && max) {\r\n      return (\r\n         <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n         </h3>\r\n      );\r\n   }\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props => {\r\n   return(\r\n      <div className=\"container\">\r\n         <div>\r\n            {props.error ? error() : null}\r\n         </div>\r\n         <form onSubmit={props.loadweather}>\r\n         <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n               <input type=\"text\"\r\n               className=\"form-control\"\r\n               name=\"city\"\r\n               placeholder=\"City\"\r\n               autoComplete=\"off\"/>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n            <input type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"country\"\r\n            placeholder=\"Country\"\r\n            autoComplete=\"off\"/>\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n               <button\r\n               className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n         </div>\r\n         </form>\r\n      </div>\r\n   );\r\n};\r\n\r\nfunction error() {\r\n   return(\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n         Pleace Enter City and Country\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key = '68d18430c8773d7e121b1ef22184323d';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: '',\n      error: false,\n\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  gerWeatherIcon(icons, rengeid) {\n    switch(true) {\n      case rengeid >= 200 && rengeid <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rengeid >= 300 && rengeid <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rengeid >= 500 && rengeid <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rengeid >= 600 && rengeid <= 622:\n          this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rengeid >= 701 && rengeid <= 781:\n          this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rengeid === 800:\n          this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rengeid === 801 && rengeid <= 804:\n          this.setState({icon: this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds});\n    }\n  }\n\n  gerWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    console.log(city)\n    console.log(country)\n\n    if(city && country) {\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_key}`);\n\n    const response = await api_call.json();\n\n    console.log(response);\n\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      icon: this.weatherIcon.Thunderstorm,\n      error: false,\n    });\n\n    this.gerWeatherIcon(this.weatherIcon, response.weather[0].id);\n  } else {\n    this.setState({error: true,})\n  }\n};\n    render() {\n  return (\n    <div className=\"App\">\n      <Form loadweather={this.gerWeather} error={this.state.error}/>\n      <Weather\n      city={this.state.city}\n      country={this.state.country}\n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcon={this.state.icon}\n      />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}